{"version":3,"sources":["Resizable.js","App.js","serviceWorker.js","index.js"],"names":["Resizable","children","resizableElement","useRef","moveElement","useEffect","current","style","setProperty","maxPaneSize","minPaneSize","document","body","clientWidth","setPaneWidth","width","getPaneWidth","pxWidth","getComputedStyle","getPropertyValue","parseInt","startDragging","event","direction","preventDefault","startingPaneWidth","xOffset","pageX","mouseDragHandler","moveEvent","paneOriginAdjustment","left","addEventListener","onmouseup","Math","min","max","removeEventListener","id","className","ref","onMouseDown","e","elmnt","pos1","pos2","pos3","pos4","clientX","clientY","onmousemove","window","top","offsetTop","offsetLeft","startMoving","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPA0GeA,G,gBAxGG,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACZC,EAAmBC,iBAAO,MAC1BC,EAAcD,iBAAO,MAG3BE,oBAAU,aAEP,IAEHA,oBAAU,WACFH,IACJA,EAAiBI,QAAQC,MAAMC,YAAY,cAA3C,UAA6DC,EAA7D,OACAP,EAAiBI,QAAQC,MAAMC,YAAY,cAA3C,UAA6DE,EAA7D,SAED,CAACR,IAEJ,IA8BMQ,EAAc,IACdD,EAA0C,GAA5BE,SAASC,KAAKC,YAE5BC,EAAe,SAACC,GACpBb,EAAiBI,QAAQC,MACtBC,YAAY,qBADf,UACwCO,EADxC,QAIIC,EAAe,WACnB,IAAMC,EAAUC,iBAAiBhB,EAAiBI,SAC/Ca,iBAAiB,sBACpB,OAAOC,SAASH,EAAS,KAGrBI,EAAgB,SAACC,EAAOC,GAC5BD,EAAME,iBACN,IAAMC,EAAoBT,IACpBU,EAAUJ,EAAMK,MAEhBC,EAAmB,SAACC,GACxBA,EAAUL,iBACV,IAAMM,EAAqC,SAAdP,EAAuB,GAAK,EACnDR,GAASW,EAAUG,EAAUF,OAASG,EAAuBL,EAE/DV,GAASL,GAAeK,GAASN,GACnCK,GAAcY,EAAUG,EAAUF,OAASG,EAAuBL,GAElD,SAAdF,GACER,GAASL,GAAeK,GAASN,IACnCP,EAAiBI,QAAQC,MAAMwB,KAAQL,GAAWD,EAAoBT,KAAmB,OAM/FL,SAASqB,iBAAiB,YAAaJ,GAMvCjB,SAASsB,UAJe,WACtBnB,EAAaoB,KAAKC,IAAID,KAAKE,IAAIpB,IAAgBN,GAAcD,IAC7DE,SAAS0B,oBAAoB,YAAaT,KAQ9C,OACE,yBAAKU,GAAG,QAAQC,UAAU,MAAMC,IAAKtC,GACnC,yBAAKoC,GAAG,cAAcC,UAAU,sBAAsBE,YAAa,SAAAC,GAAC,OAAIrB,EAAcqB,EAAG,YACzF,yBAAKJ,GAAG,aAAaC,UAAU,qBAAqBE,YAAa,SAAAC,GAAC,OAAIrB,EAAcqB,EAAG,WACvF,yBAAKJ,GAAG,cAAcE,IAAKpC,EAAaqC,YAAa,SAAAC,GAAC,OAjFtC,SAACA,EAAGC,GACtB,IAAIC,EAAO,EAAGC,EAAO,EAAGC,EAAO,EAAGC,EAAO,EAGzCD,EAAOJ,EAAEM,QACTD,EAAOL,EAAEO,QACTtC,SAASsB,UAiBT,WAEEtB,SAASsB,UAAY,KACrBtB,SAASuC,YAAc,MAlBzBvC,SAASuC,YAET,SAAqBR,IACnBA,EAAIA,GAAKS,OAAO7B,OACdE,iBAEFoB,EAAOE,EAAOJ,EAAEM,QAChBH,EAAOE,EAAOL,EAAEO,QAChBH,EAAOJ,EAAEM,QACTD,EAAOL,EAAEO,QAETN,EAAMpC,MAAM6C,IAAOT,EAAMU,UAAYR,EAAQ,KAC7CF,EAAMpC,MAAMwB,KAAQY,EAAMW,WAAaV,EAAQ,MA6DWW,CAAYb,EAAGxC,EAAiBI,WACxFL,MCjFOuD,MAdf,WAEE,OACE,yBAAKjB,UAAU,OAAf,uBAEE,kBAAC,EAAD,KACE,uDCCYkB,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnD,SAASoD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8b19f671.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\"\n\nconst Resizable = ({children}) => {\n  const resizableElement = useRef(null)\n  const moveElement = useRef(null)\n  \n  // const [resizableElement, setResizableElement] = useState(null)\n  useEffect(() => {\n    // setResizableElement(document.getElementById(\"mydiv\"))\n  }, []);\n\n  useEffect(() => {\n    if (!!resizableElement) {\n      resizableElement.current.style.setProperty('--max-width', `${maxPaneSize}px`);\n      resizableElement.current.style.setProperty('--min-width', `${minPaneSize}px`);\n    }\n  }, [resizableElement]);\n\n  const startMoving = (e, elmnt) => {\n    var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\n\n    // get the mouse cursor position at startup:\n    pos3 = e.clientX;\n    pos4 = e.clientY;\n    document.onmouseup = closeDragElement;\n    // call a function whenever the cursor moves:\n    document.onmousemove = elementDrag;\n\n    function elementDrag(e) {\n      e = e || window.event;\n      e.preventDefault();\n      // calculate the new cursor position:\n      pos1 = pos3 - e.clientX;\n      pos2 = pos4 - e.clientY;\n      pos3 = e.clientX;\n      pos4 = e.clientY;\n      // set the element's new position:\n      elmnt.style.top = (elmnt.offsetTop - pos2) + \"px\";\n      elmnt.style.left = (elmnt.offsetLeft - pos1) + \"px\";\n    }\n\n    function closeDragElement() {\n      // stop moving when mouse button is released:\n      document.onmouseup = null;\n      document.onmousemove = null;\n    }\n  }\n\n  const minPaneSize = 150;\n  const maxPaneSize = document.body.clientWidth * .5\n\n  const setPaneWidth = (width) => {\n    resizableElement.current.style\n      .setProperty('--resizeable-width', `${width}px`);\n  };\n\n  const getPaneWidth = () => {\n    const pxWidth = getComputedStyle(resizableElement.current)\n      .getPropertyValue('--resizeable-width');\n    return parseInt(pxWidth, 10);\n  };\n\n  const startDragging = (event, direction) => {\n    event.preventDefault();\n    const startingPaneWidth = getPaneWidth();\n    const xOffset = event.pageX;\n\n    const mouseDragHandler = (moveEvent) => {\n      moveEvent.preventDefault();\n      const paneOriginAdjustment = direction === 'left' ? 1 : -1;\n      const width = (xOffset - moveEvent.pageX) * paneOriginAdjustment + startingPaneWidth\n\n      if (width >= minPaneSize && width <= maxPaneSize)\n        setPaneWidth((xOffset - moveEvent.pageX) * paneOriginAdjustment + startingPaneWidth);\n      // direction === 'left' && dragElement(resizableElement)\n      if (direction === 'left') {\n        if (width >= minPaneSize && width <= maxPaneSize) {\n          resizableElement.current.style.left = (xOffset + (startingPaneWidth - getPaneWidth())) + \"px\"\n        }\n      }\n    };\n\n    // window.addEventListener('mousemove', mouseDragHandler);\n    document.addEventListener('mousemove', mouseDragHandler);\n\n    const stopDragHandler = () => {\n      setPaneWidth(Math.min(Math.max(getPaneWidth(), minPaneSize), maxPaneSize));\n      document.removeEventListener('mousemove', mouseDragHandler);\n    }\n    document.onmouseup = stopDragHandler;\n\n  };\n\n  // resizableElement && startMoving(resizableElement)\n\n  return (\n    <div id=\"mydiv\" className=\"box\" ref={resizableElement}>\n      <div id=\"handleRight\" className=\"handle handle-right\" onMouseDown={e => startDragging(e, 'right')}></div>\n      <div id=\"handleLeft\" className=\"handle handle-left\" onMouseDown={e => startDragging(e, 'left')}></div>\n      <div id=\"mydivheader\" ref={moveElement} onMouseDown={e => startMoving(e, resizableElement.current)}>{\n        children\n      }</div>\n    </div>\n  )\n}\n\nexport default Resizable;","import React from 'react';\nimport './App.css';\nimport './App.scss';\nimport Resizable from './Resizable';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      Move and Resize Demo\n      <Resizable>\n        <div>\n          My original content\n        </div>\n      </Resizable>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}